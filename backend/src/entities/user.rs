//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub user_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub dorm: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::completion::Entity")]
    Completion,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
}

impl Related<super::completion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Completion.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl Related<super::challenges::Entity> for Entity {
    fn to() -> RelationDef {
        super::completion::Relation::Challenges.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::completion::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
