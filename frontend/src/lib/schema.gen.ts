/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["root"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/challenges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_all_challenges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/verify_transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["verify_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/challenges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_challenges"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_completion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/journal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_journal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/journal/{challenge_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_journal_entry"];
        put: operations["update_journal_entry"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/journal/{challenge_name}/photo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["delete_journal_photo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_leaderboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/dorm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["update_dorm"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_rewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_transaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["cancel_transaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AdminChallengesListResponse: {
            challenges: components["schemas"]["Model"][];
        };
        CancelTransactionResponse: {
            message: string;
            success: boolean;
        };
        ChallengeDetails: {
            category: string;
            description: string;
            location: string;
            maps_link: string;
            more_info_link?: string | null;
            /** Format: int32 */
            scotty_coins: number;
            tagline: string;
        };
        ChallengeResponse: (null | components["schemas"]["ChallengeDetails"]) & {
            /** Format: date-time */
            completed_at?: string | null;
            name: string;
            status: components["schemas"]["ChallengeStatus"];
            /** Format: date-time */
            unlock_timestamp: string;
        };
        /** @enum {string} */
        ChallengeStatus: "locked" | "available" | "completed";
        ChallengesListResponse: {
            challenges: components["schemas"]["ChallengeResponse"][];
        };
        CompletionResponse: {
            challenge_name: string;
            /** Format: int32 */
            coins_earned: number;
            /** Format: date-time */
            completed_at: string;
        };
        CreateCompletionRequest: {
            challenge_name: string;
            image_data: string;
            note?: string | null;
            verification_code: string;
        };
        CreateCompletionResponse: {
            completion?: null | components["schemas"]["CompletionResponse"];
            message: string;
            success: boolean;
        };
        CreateTransactionRequest: {
            /** Format: int32 */
            count: number;
            reward_name: string;
        };
        CreateTransactionResponse: {
            message: string;
            success: boolean;
            transaction?: null | components["schemas"]["TransactionResponse"];
        };
        DeletePhotoResponse: {
            message: string;
            success: boolean;
        };
        JournalEntry: {
            challenge_category: string;
            challenge_location: string;
            challenge_name: string;
            challenge_tagline: string;
            /** Format: int32 */
            coins_earned: number;
            /** Format: date-time */
            completed_at: string;
            image_url?: string | null;
            note?: string | null;
        };
        JournalEntryResponse: {
            entry?: null | components["schemas"]["JournalEntry"];
        };
        JournalListResponse: {
            entries: components["schemas"]["JournalEntry"][];
        };
        LeaderboardEntry: {
            /** Format: int64 */
            challenges_completed: number;
            /** Format: int64 */
            coins_earned: number;
            /** Format: int64 */
            coins_spent: number;
            dorm?: string | null;
            name: string;
            /** Format: int64 */
            rank: number;
            user_id: string;
        };
        LeaderboardResponse: {
            entries: components["schemas"]["LeaderboardEntry"][];
            has_next: boolean;
            /** Format: int64 */
            next_cursor?: number | null;
        };
        Model: {
            category: string;
            description: string;
            location: string;
            maps_link: string;
            more_info_link?: string | null;
            name: string;
            /** Format: int32 */
            scotty_coins: number;
            secret: string;
            tagline: string;
            /** Format: date-time */
            unlock_timestamp: string;
        };
        RewardResponse: {
            /** Format: int32 */
            cost: number;
            name: string;
            slug: string;
            /** Format: int32 */
            stock: number;
            /** Format: int32 */
            trade_limit: number;
            transaction_info: components["schemas"]["RewardTransactionInfo"];
        };
        RewardTransactionInfo: {
            /** Format: int32 */
            complete_count: number;
            /** Format: int32 */
            incomplete_count: number;
            /** Format: int32 */
            total_purchased: number;
            transactions: components["schemas"]["TransactionDetail"][];
        };
        RewardsListResponse: {
            rewards: components["schemas"]["RewardResponse"][];
        };
        TransactionDetail: {
            /** Format: int32 */
            count: number;
            status: string;
            /** Format: date-time */
            timestamp: string;
            transaction_id: string;
        };
        TransactionResponse: {
            /** Format: int32 */
            count: number;
            reward_name: string;
            status: string;
            /** Format: int32 */
            total_cost: number;
            transaction_id: string;
        };
        UpdateDormRequest: {
            dorm?: string | null;
        };
        UpdateJournalRequest: {
            note?: string | null;
        };
        UserProfileResponse: {
            dorm?: string | null;
            name: string;
            /** Format: int32 */
            scotty_coins: number;
            user_id: string;
        };
        VerifyTransactionRequest: {
            transaction_id: string;
        };
        VerifyTransactionResponse: {
            message: string;
            success: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    get_all_challenges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All challenges retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminChallengesListResponse"];
                };
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verify_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyTransactionRequest"];
            };
        };
        responses: {
            /** @description Transaction verification processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyTransactionResponse"];
                };
            };
            /** @description Forbidden - Admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_challenges: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Challenges retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengesListResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_completion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompletionRequest"];
            };
        };
        responses: {
            /** @description Completion processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCompletionResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_journal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Journal entries retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalListResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_journal_entry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the challenge */
                challenge_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Journal entry retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntryResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_journal_entry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the challenge */
                challenge_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateJournalRequest"];
            };
        };
        responses: {
            /** @description Journal entry updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JournalEntryResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_journal_photo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Name of the challenge */
                challenge_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Photo deletion processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeletePhotoResponse"];
                };
            };
            /** @description Journal entry not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_leaderboard: {
        parameters: {
            query?: {
                /** @description Number of entries to return (max 100, default 20) */
                limit?: number;
                /** @description Cursor for pagination - rank to start after */
                after_rank?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Leaderboard retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LeaderboardResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_dorm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDormRequest"];
            };
        };
        responses: {
            /** @description Dorm updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_rewards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rewards retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardsListResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTransactionRequest"];
            };
        };
        responses: {
            /** @description Transaction processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTransactionResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    cancel_transaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the transaction to cancel */
                transaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction cancellation processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelTransactionResponse"];
                };
            };
            /** @description Cannot cancel this transaction */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Transaction not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health check */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
